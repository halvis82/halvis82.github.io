{"version":3,"sources":["components/Header.js","components/GridBox.js","components/GameFrame.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","className","GridBox","symbol","coordinates","gameGrid","gameOver","changeGameGrid","onClick","GameFrame","restartGame","App","useState","setGameGrid","xTurn","setTurn","setGameOver","x","y","newGameGrid","win","currentPlayer","console","log","draw","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0f4d4f4.chunk.js","sourcesContent":["const Header = ({title}) => {\r\n  return (\r\n    <h1 className=\"header\">\r\n      {title}\r\n    </h1>\r\n  )\r\n}\r\n\r\nexport default Header","const GridBox = ({coordinates, gameGrid, gameOver, changeGameGrid}) => {\r\n  const update = () => {\r\n    if (!gameOver) {\r\n      if (gameGrid[coordinates[0]][coordinates[1]] === 0) {    \r\n        changeGameGrid(coordinates[0], coordinates[1])\r\n      }\r\n     }\r\n  }\r\n\r\n  let symbol\r\n\r\n  if (gameGrid[coordinates[0]][coordinates[1]] === 0) {\r\n    symbol = \"\"\r\n  } else if (gameGrid[coordinates[0]][coordinates[1]] === 1) {\r\n    symbol = \"X\"\r\n  } else if (gameGrid[coordinates[0]][coordinates[1]] === 2) {\r\n    symbol = \"O\"\r\n  }\r\n\r\n  return (\r\n    <div className=\"gridBox\" onClick={update}>\r\n      {symbol}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GridBox","import GridBox from \"./GridBox\"\r\n\r\nconst GameFrame = ({gameOver, restartGame, gameGrid, changeGameGrid}) => {\r\n  const resetGame = () => {\r\n    if (gameOver) {\r\n      restartGame()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"ticTacToeFrame\" onClick={resetGame}>\r\n      <GridBox coordinates={[0, 0]} gameGrid={gameGrid} gameOver={gameOver} changeGameGrid={changeGameGrid} />\r\n      <GridBox coordinates={[0, 1]} gameGrid={gameGrid} gameOver={gameOver} changeGameGrid={changeGameGrid} />\r\n      <GridBox coordinates={[0, 2]} gameGrid={gameGrid} gameOver={gameOver} changeGameGrid={changeGameGrid} />\r\n        \r\n      <GridBox coordinates={[1, 0]} gameGrid={gameGrid} gameOver={gameOver} changeGameGrid={changeGameGrid} />\r\n      <GridBox coordinates={[1, 1]} gameGrid={gameGrid} gameOver={gameOver} changeGameGrid={changeGameGrid} />\r\n      <GridBox coordinates={[1, 2]} gameGrid={gameGrid} gameOver={gameOver} changeGameGrid={changeGameGrid} />\r\n        \r\n      <GridBox coordinates={[2, 0]} gameGrid={gameGrid} gameOver={gameOver} changeGameGrid={changeGameGrid} />\r\n      <GridBox coordinates={[2, 1]} gameGrid={gameGrid} gameOver={gameOver} changeGameGrid={changeGameGrid} />\r\n      <GridBox coordinates={[2, 2]} gameGrid={gameGrid} gameOver={gameOver} changeGameGrid={changeGameGrid} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameFrame","//Halvor, 23.02.2021, Tic Tac Toe ((STUPID APP, STUPID STRUCTURE))\n\n/*\nChanges:\n- show turn\n- feedback when game over (color winning pieces)\n- show score\n- add 1 player\n- build not working? (npm run build) (it compiles, but build doesn't work) (maybe edit public folder (manifest.json))\n*/\n\n//Imports\nimport Header from \"./components/Header\"\nimport GameFrame from \"./components/GameFrame\"\nimport {useState} from \"react\"\n\n//Main function\nconst App = () => {\n  const [gameGrid, setGameGrid] = useState([\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0]\n  ])\n  const [xTurn, setTurn] = useState(true)\n  const [gameOver, setGameOver] = useState(false)\n\n  //Update game grid\n  const changeGameGrid = (x, y) => {\n    let newGameGrid = gameGrid\n    newGameGrid[x][y] = (xTurn) ? 1 : 2\n    setGameGrid(newGameGrid)\n\n    //Detect three in a row\n    let win = false\n    let currentPlayer = gameGrid[x][y]\n    //Horizontal\n    for (let y = 0; y < 3; y++) {\n      if (currentPlayer === gameGrid[0][y] && currentPlayer === gameGrid[1][y] && currentPlayer === gameGrid[2][y]) {\n        win = true\n        break\n      }\n    }\n    //Vertical\n    for (let x = 0; x < 3; x++) {\n      if (currentPlayer === gameGrid[x][0] && currentPlayer === gameGrid[x][1] && currentPlayer === gameGrid[x][2]) {\n        win = true\n        break\n      }\n    }\n    //Diagonal\n    if (currentPlayer === gameGrid[0][0] && currentPlayer === gameGrid[1][1] && currentPlayer === gameGrid[2][2]) { //Top left to bottom right\n      win = true\n    }\n      if (currentPlayer === gameGrid[2][0] && currentPlayer === gameGrid[1][1] && currentPlayer === gameGrid[0][2]) { //Top right to bottom left\n      win = true\n    }\n\n    //Handle win\n    if (win) {\n      console.log(`'${(xTurn) ? \"X\" : \"O\"}' won!`)\n      setGameOver(true)\n    }\n\n    //Check if game over (all squares filled, nobody won)\n    if (!win) {\n      let draw = true\n      for (let x = 0; x < 3; x++) {\n        for (let y = 0; y < 3; y++) {\n          if (gameGrid[x][y] === 0) {\n            draw = false\n            break\n          }\n        }\n      }\n      if (draw) {\n        console.log(\"Draw!\")\n        setGameOver(true)\n      }\n    }\n\n    //Change turn\n    setTurn(!xTurn)\n  }\n\n  //Restart game\n  const restartGame = () => {\n    setGameGrid([\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0]\n    ])\n    setTurn(true)\n    setGameOver(false)\n  }\n\n  return (\n    <div className=\"frame\">\n      <Header title={\"Tic Tac Toe\"} />\n      <GameFrame gameOver={gameOver} restartGame={restartGame} gameGrid={gameGrid} changeGameGrid={changeGameGrid} xTurn={xTurn} />\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}